{"version":3,"sources":["../src/mixin-enable-when.js"],"names":["getCurrentValue","value","id","methods","getEnableWhenSatatus","enableWhen","data","$enableWhen","handlePlain","undefined","hasOwnProperty","currentValue","Array","isArray","some","item"],"mappings":"AAAA;;;;AAIA;AACA,SAASA,eAAT,CAA0BC,KAA1B,EAAiCC,EAAjC,EAAqC;AACnC,SAAOD,SAASA,MAAMC,EAAN,CAAhB;AACD;;AAED,eAAe;AACbC,WAAS;AACP;;;;;;AAMAC,wBAPO,kCAOgE;AAAA;;AAAA,UAAjDC,UAAiD,uEAApC,KAAKC,IAAL,IAAa,KAAKA,IAAL,CAAUC,WAAa;;AACrE;AACA,UAAMC,cAAc,SAAdA,WAAc,CAACH,UAAD,EAAgB;AAClC;AACA,YAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClC,iBAAOL,gBAAgB,MAAKC,KAArB,EAA4BI,UAA5B,MAA4CI,SAAnD;AACD;AACD;AACA,aAAK,IAAIP,EAAT,IAAeG,UAAf,EAA2B;AACzB,cAAIA,WAAWK,cAAX,CAA0BR,EAA1B,CAAJ,EAAmC;AACjC,gBAAIS,eAAeX,gBAAgB,MAAKC,KAArB,EAA4BC,EAA5B,CAAnB;AACA,gBAAIS,iBAAiBF,SAAjB,IAA8BE,iBAAiB,EAAnD,EAAuD,OAAO,KAAP;AACvD,gBAAI,CAACN,WAAWH,EAAX,CAAD,IAAmBS,iBAAiB,EAAxC,EAA4C,OAAO,KAAP;AAC5C,gBAAIN,WAAWH,EAAX,MAAmBO,SAAnB,IAAgCE,iBAAiBN,WAAWH,EAAX,CAArD,EAAqE,OAAO,KAAP;AACtE;AACF;AACD,eAAO,IAAP;AACD,OAfD;;AAiBA,UAAIG,UAAJ,EAAgB;AACd,eAAOO,MAAMC,OAAN,CAAcR,UAAd,IAA4BA,WAAWS,IAAX,CAAgB;AAAA,iBAAQN,YAAYO,IAAZ,CAAR;AAAA,SAAhB,CAA5B,GAAyEP,YAAYH,UAAZ,CAAhF;AACD,OAFD,MAEO;AACL,eAAO,IAAP;AACD;AACF;AA/BM;AADI,CAAf","file":"mixin-enable-when.js","sourcesContent":["/**\n * 该 mixin 负责处理依赖属性 enableWhen 问题\n */\n\n// 获取 value 对应 id 的配置值\nfunction getCurrentValue (value, id) {\n  return value && value[id]\n}\n\nexport default {\n  methods: {\n    /**\n     * 处理 $enableWhen\n     *\n     * 与条件: 简单依赖关系存在2种情况：简单对象 || 字符串\n     * 或条件: 即使用 [] 包裹所有与条件 enableWhen: [{ a: 1 }, { a: 2 }]\n     */\n    getEnableWhenSatatus (enableWhen = this.data && this.data.$enableWhen) {\n      // 处理一个与条件\n      const handlePlain = (enableWhen) => {\n        // 简单字符串(ID), 只要有值即为true\n        if (typeof enableWhen === 'string') {\n          return getCurrentValue(this.value, enableWhen) !== undefined\n        }\n        // 简单对象判断: 是否所有依赖条件都通过\n        for (var id in enableWhen) {\n          if (enableWhen.hasOwnProperty(id)) {\n            let currentValue = getCurrentValue(this.value, id)\n            if (currentValue === undefined || currentValue === '') return false\n            if (!enableWhen[id] && currentValue === '') return false\n            if (enableWhen[id] !== undefined && currentValue !== enableWhen[id]) return false\n          }\n        }\n        return true\n      }\n\n      if (enableWhen) {\n        return Array.isArray(enableWhen) ? enableWhen.some(item => handlePlain(item)) : handlePlain(enableWhen)\n      } else {\n        return true\n      }\n    }\n  }\n}\n"]}